{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import { lintRule } from \"unified-lint-rule\";\nimport type { Literal, Node, Position } from \"unist\";\nimport { visit } from \"unist-util-visit\";\nimport { VFile } from \"vfile\";\nimport { location } from \"vfile-location\";\nimport type { NonEmptyArray } from \"./utils\";\n\n\nexport type RemarkLintWordCaseOptions = {\n  words: NonEmptyArray<string>;\n};\n\ninterface TextNode extends Literal {\n  type: \"text\";\n  value: string;\n  position?: Position;\n}\n\n\nconst RULE_ID = \"word-case\";\nconst SOURCE_ID = `remark-lint:${RULE_ID}`;\n\nexport const ERRORS = {\n  OPTIONS_UNDEFINED: \"Options must include a `words` key.\",\n  OPTIONS_INVALID: \"`words` must be a non-empty array of unique string values.\",\n} as const;\n\n\nfunction wordCaseRule(\n  tree: Node,\n  file: VFile,\n  options: RemarkLintWordCaseOptions,\n) {\n  // Runtime option validation\n  if (!options?.words) {\n    file.fail(ERRORS.OPTIONS_UNDEFINED, undefined, SOURCE_ID);\n  }\n  if (\n    !Array.isArray(options.words) ||\n    options.words.length === 0 ||\n    options.words.some((word) => typeof word !== \"string\")\n  ) {\n    file.fail(ERRORS.OPTIONS_INVALID, undefined, SOURCE_ID);\n  }\n\n  // This map allows us to instantly find the correct casing for a given lowercase word.\n  const caseMap = new Map(\n    options.words.map((word) => [word.toLowerCase(), word]),\n  );\n\n  // Compile RegEx pattern (once per file)\n  const pattern = new RegExp(`\\\\b(${options.words.join(\"|\")})\\\\b`, \"gi\");\n  const loc = location(file);\n\n  visit(tree, \"text\", (node: TextNode) => {\n    // A node might not have a position if it was created programmatically.\n    if (!node.position?.start?.offset) {\n      return;\n    }\n    const nodeStartOffset = node.position.start.offset;\n\n    let match;\n    // Use the pre-compiled regex pattern to find all matches.\n    while ((match = pattern.exec(node.value)) !== null) {\n      const actual = match[0];\n      const lowercasedActual = actual.toLowerCase();\n\n      // Use the map to find the expected casing.\n      const expected = caseMap.get(lowercasedActual);\n\n      // Only report an error if the casing is incorrect.\n      if (expected && expected !== actual) {\n        const wordStartIndex = match.index;\n        const wordStartOffset = nodeStartOffset + wordStartIndex;\n        const wordEndOffset = wordStartOffset + actual.length;\n\n        // Convert offsets to {line, column} points.\n        const start = loc.toPoint(wordStartOffset);\n        const end = loc.toPoint(wordEndOffset);\n\n        // Create VFile message.\n        const message = file.message(\n          `Incorrect word case. Expected \\`${expected}\\` but found \\`${actual}\\``,\n          { start, end } as Position,\n          `${SOURCE_ID}:${RULE_ID}`,\n        );\n\n        // These fields allow the plugin to automatically fix files when remark is called with `--output` option\n        message.expected = [expected];\n        message.actual = actual;\n      }\n    }\n  });\n}\n\nconst remarkLintWordCase = lintRule(SOURCE_ID, wordCaseRule);\n\nexport default remarkLintWordCase;\n"
  ],
  "mappings": ";AAAA;AAEA;AAEA;AAeA,IAAM,UAAU;AAChB,IAAM,YAAY,eAAe;AAE1B,IAAM,SAAS;AAAA,EACpB,mBAAmB;AAAA,EACnB,iBAAiB;AACnB;AAGA,SAAS,YAAY,CACnB,MACA,MACA,SACA;AAAA,EAEA,KAAK,SAAS,OAAO;AAAA,IACnB,KAAK,KAAK,OAAO,mBAAmB,WAAW,SAAS;AAAA,EAC1D;AAAA,EACA,KACG,MAAM,QAAQ,QAAQ,KAAK,KAC5B,QAAQ,MAAM,WAAW,KACzB,QAAQ,MAAM,KAAK,CAAC,SAAS,OAAO,SAAS,QAAQ,GACrD;AAAA,IACA,KAAK,KAAK,OAAO,iBAAiB,WAAW,SAAS;AAAA,EACxD;AAAA,EAGA,MAAM,UAAU,IAAI,IAClB,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,YAAY,GAAG,IAAI,CAAC,CACxD;AAAA,EAGA,MAAM,UAAU,IAAI,OAAO,OAAO,QAAQ,MAAM,KAAK,GAAG,SAAS,IAAI;AAAA,EACrE,MAAM,MAAM,SAAS,IAAI;AAAA,EAEzB,MAAM,MAAM,QAAQ,CAAC,SAAmB;AAAA,IAEtC,KAAK,KAAK,UAAU,OAAO,QAAQ;AAAA,MACjC;AAAA,IACF;AAAA,IACA,MAAM,kBAAkB,KAAK,SAAS,MAAM;AAAA,IAE5C,IAAI;AAAA,IAEJ,QAAQ,QAAQ,QAAQ,KAAK,KAAK,KAAK,OAAO,MAAM;AAAA,MAClD,MAAM,SAAS,MAAM;AAAA,MACrB,MAAM,mBAAmB,OAAO,YAAY;AAAA,MAG5C,MAAM,WAAW,QAAQ,IAAI,gBAAgB;AAAA,MAG7C,IAAI,YAAY,aAAa,QAAQ;AAAA,QACnC,MAAM,iBAAiB,MAAM;AAAA,QAC7B,MAAM,kBAAkB,kBAAkB;AAAA,QAC1C,MAAM,gBAAgB,kBAAkB,OAAO;AAAA,QAG/C,MAAM,QAAQ,IAAI,QAAQ,eAAe;AAAA,QACzC,MAAM,MAAM,IAAI,QAAQ,aAAa;AAAA,QAGrC,MAAM,UAAU,KAAK,QACnB,mCAAmC,0BAA0B,YAC7D,EAAE,OAAO,IAAI,GACb,GAAG,aAAa,SAClB;AAAA,QAGA,QAAQ,WAAW,CAAC,QAAQ;AAAA,QAC5B,QAAQ,SAAS;AAAA,MACnB;AAAA,IACF;AAAA,GACD;AAAA;AAGH,IAAM,qBAAqB,SAAS,WAAW,YAAY;AAE3D,IAAe;",
  "debugId": "C716057062C8CA9F64756E2164756E21",
  "names": []
}